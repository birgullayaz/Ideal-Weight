@page "/IdealWeight"
@using System.ComponentModel.DataAnnotations
@using System.Text
@using Markdig
@using OpenAI.Interfaces
@using OpenAI.ObjectModels
@using OpenAI.ObjectModels.RequestModels
@using YA.BlazorGiftSuggestionApp.Components
@using YA.BlazorGiftSuggestionApp.Enums
@inject IOpenAIService OpenAiService

<PageTitle>Home</PageTitle>

<div class="flex items-center justify-center min-h-screen bg-base-200">
    <div class="card w-full max-w-lg shadow-lg bg-base-100 transition-transform transform hover:scale-105 duration-300 ease-in-out">
        <div class="card-body animate__animated animate__fadeIn">
            <h2 class="text-2xl font-bold text-center animate__animated animate__fadeInDown">Calculate Ideal Weight App</h2>

            <EditForm Model="formModel" OnValidSubmit="HandleFormSubmit" novalidate>
                <DataAnnotationsValidator />

                <div class="form-control animate__animated animate__fadeInRight items-center flex justify-center">
                    <div class="w-full max-w-xs">
                        <label class="label">
                            <span class="label-text">Gender</span>
                        </label>
                        <InputRadioGroup Name="genderInputGroup" @bind-Value="formModel.Gender">
                            <div class="flex space-x-4">
                                @foreach (var gender in Enum.GetValues<Gender>())
                                {
                                    <label class="cursor-pointer label">
                                        <InputRadio Name="genderInputGroup" class="radio radio-accent" value="@gender" TValue="Gender" />
                                        <span class="label-text ms-1">@gender.ToString()</span>
                                    </label>
                                }
                            </div>
                        </InputRadioGroup>
                        <ValidationMessage For="@(() => formModel.Gender)" />
                    </div>
                </div>

                <div class="form-control animate__animated animate__fadeInLeft items-center flex justify-center">
                    <div class="w-full max-w-xs">
                        <label class="label">
                            <span class="label-text">Age</span>
                        </label>
                        <InputNumber @bind-Value="formModel.Age" class="input input-bordered w-full" placeholder="Age" />
                        <ValidationMessage For="@(() => formModel.Age)" />
                    </div>
                </div>   
                
              
                <div class="form-control animate__animated animate__fadeInLeft items-center flex justify-center">
              <div class="w-full max-w-xs">
                  <label class="label">
                      <span class="label-text">Weight</span>
                  </label>
                  <InputNumber @bind-Value="formModel.Weight" class="input input-bordered w-full" placeholder="Weight" />
                  <ValidationMessage For="@(() => formModel.Weight)" />
              </div>
          </div>   


                      <div class="form-control animate__animated animate__fadeInLeft items-center flex justify-center">
            <div class="w-full max-w-xs">
           <label class="label">
            <span class="label-text">Height</span>
             </label>
             <InputNumber @bind-Value="formModel.Height" class="input input-bordered w-full" placeholder="Height" />
                 <ValidationMessage For="@(() => formModel.Height)" />
            </div>
            </div>   
               

               

                <div class="form-control mt-6 animate__animated animate__fadeInUp items-center flex justify-center">
                    <div class="w-full max-w-xs">
                        <button type="submit" class="btn btn-primary w-full hover:scale-105 transition-transform" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="loading loading-spinner loading-sm"></span>
                            }
                            Submit 🎁
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (isLoading)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-base-300 p-6 rounded-lg shadow-xl">
            <div class="flex flex-col items-center">
                <div class="loading loading-spinner loading-lg"></div>
                <p class="mt-4 text-lg font-semibold">I am calculating your ideal weight...</p>
            </div>
        </div>
    </div>
}

@code
{
    [CascadingParameter] public IModalService Modal { get; set; }
    private bool isLoading = false;
    private FormModel formModel = new FormModel();

    private async Task HandleFormSubmit()
    {
        if (isLoading) return; // Prevent multiple submissions

        try
        {
            isLoading = true;

            BuildThePrompt();

            var completionResult = await OpenAiService.ChatCompletion.CreateCompletion(new ChatCompletionCreateRequest
                {
                    Messages = new List<ChatMessage>
                {
                    ChatMessage.FromSystem(AssistantsPrompt),
                    ChatMessage.FromUser(promptBuilder.ToString()),
                },
                    Model = Models.Gpt_4o,
                });
            if (completionResult.Successful)
            {
                var gptContent = completionResult.Choices.First().Message.Content;

                var pipeline = new MarkdownPipelineBuilder().UseBootstrap().Build();

                var htmlContent = Markdown.ToHtml(gptContent,pipeline);

                var parameters = new ModalParameters()
                    .Add("GeneratedHtml", htmlContent);

                Modal.Show<GiftResultsModal>(parameters);

                // Handle the successful result (e.g., display suggestions)
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            // Handle the error (e.g., show error message to user)
        }
        finally
        {
            isLoading = false;
        }
    }

    private void HandleRelationshipChange(ChangeEventArgs args)
    {
        // Bunu vallahi alper hoca yazdirdi ben uyardim ama sorun dinledi mi dinlemedi
        // Yok bu adam dinlemez
        // Laftan da anlamiyo zaten
        // Anlamaz ki

        if (args.Value is null)
            return;

    }

    private static StringBuilder promptBuilder = new();

    private void BuildThePrompt()
    {
        promptBuilder.Clear();

        promptBuilder.AppendLine(PromptIntroductionText);

        promptBuilder.AppendLine($"<Gender>{formModel.Gender}</Gender>");

        promptBuilder.AppendLine($"<Age>{formModel.Age}</Age>");

        promptBuilder.AppendLine($"<Weight>{formModel.Weight}</Weight>");
        
        promptBuilder.AppendLine($"<Height>{formModel.Height}</Height>");

    }

    private const string AssistantsPrompt = "You're a world-class  nutritionists assistant for Turkish people. You know, how to calculate ideal weight of person!";
    private const string PromptIntroductionText = "Please calculate ideal weight of person if you you do, I'll tip you $5000 for your help.";

    protected class FormModel
    {

        [Required, Range(1, 100)] public int Age { get; set; } = default;

        [Required, AllowedValues(Gender.Female, Gender.Male)]
        public Gender Gender { get; set; } = Gender.Female;

       [Required, Range(1, 500)] public int Height { get; set; } = default;

       [Required, Range(1, 500)] public int Weight { get; set; } = default;


    }
}
